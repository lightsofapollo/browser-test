#!/usr/bin/env node

var co = require('co');
var denodeify = require('promise').denodeify;
var debug = require('debug')('browser-test:launcher:firefox');
var exec = denodeify(require('child_process').exec);
var fs = require('co-fs');
var profile = denodeify(require('mozilla-profile-builder').create);
var spawn = require('child_process').spawn;

var COMMON_PATHS = [
  // XXX: Only common paths included for OSX... on linux should work just
  // fine.
  '/Applications/FirefoxNightly.app/Contents/MacOS/firefox',
  '/Applications/FirefoxAurora.app/Contents/MacOS/firefox',
  '/Applications/Firefox.app/Contents/MacOS/firefox'
];

function* searchCommon() {
  var firefoxes = yield COMMON_PATHS.map(fs.exists);
  for (var i = 0; i < firefoxes.length; i ++) {
    if (firefoxes[i]) return COMMON_PATHS[i];
  }
}

function* which() {
  return yield exec('which firefox');
}

co(function*() {
  if (!process.argv[2]) {
    console.error('First argument must be a url');
    return process.exit(1);
  }

  // url to launch in firefox
  var url = process.argv[2];

  // find firefox
  var firefox = yield which();
  if (firefox) {
    firefox = 'firefox';
  } else {
    debug('could not find firefox via which falling back to constants');
    firefox = yield searchCommon();
  }

  if (!firefox) {
    console.error('Could not locate firefox! Add it to your path');
    process.exit(1);
    return;
  }

  var profileDir = yield profile({});
  var firefoxProc = spawn(firefox, [
    '--no-remote',
    '--profile', profileDir.path,
    process.argv[2]
  ], {
    env: process.env,
    stdio: 'inherit'
  });

  // crash detection logic
  var intendedExit = false;

  process.once('SIGINT', function() {
    firefoxProc.kill();
    intendedExit = true;
  });

  firefoxProc.once('exit', function() {
    if (!intendedExit) {
      // XXX: This should keep around profile directories...
      console.error('Browser crash detected!');
      process.exit(1);
    }
  });

})(function(err) {
  if (err) throw err;
});
