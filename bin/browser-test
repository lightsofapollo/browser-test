#! /usr/bin/env node --harmony

var WSServer = require('websocket').server;

var koa = require('koa');
var socketio = require('socket.io');
var static = require('koa-static');
var mount = require('koa-mount');
var tap = require('../reporter/tap');
var program = require('commander');
var wsReader = require('../server/ws_emitter');

program.
  // XXX: This setting is purely for proof of concept
  option(
    '--entrypoint <file.html>',
    'entrypoint for the test (an html file)'
  ).
  usage('$1 <test.js|html>').
  parse(process.argv);

var app = koa();

// the client specific to this version of browser test
app.use(mount('/browser_test/', static(__dirname + '/../build')));

// default simple server just serves up current folder
app.use(static(process.cwd()));

var server = app.listen(0);
var ws = new WSServer({
  httpServer: server,
  autoAcceptConnections: true
});

// XXX: Allow passing domains, etc...
var port = server.address().port;
var serverUrl = 'http://localhost:' + port;
var wsUrl = 'ws://localhost:' + port + '/test';

var queryString = require('querystring');
var url = require('url');

function resolveLanchUrl(server, entrypoint, test, ws) {
  var config = { url: ws };

  if (entrypoint) {
    config.test = url.resolve('/', test);
    return url.resolve(server, entrypoint) + '?' + queryString.stringify(config);
  }

  return url.resolve(server, test) + '?' + queryString.stringify(config);
}

var launchUrl =
  resolveLanchUrl(serverUrl, program.entrypoint, program.args[0], wsUrl);

// XXX: Obviously this should be configurable (or even just a call to open on
// OSX)
var launcher = __dirname + '/../launcher/firefox';
var spawn = require('child_process').spawn;
var browserProc = spawn(
  launcher,
  [launchUrl],
  {
    env: process.env,
    stdio: 'inherit'
  }
);

ws.once('connect', function(socket) {
  var emitter = wsReader(socket);
  tap(emitter, process.stdout);

  emitter.once('finished', function(event) {
    browserProc.kill('SIGINT');
    browserProc.once('exit', function() {
      if (event.failed) return process.exit(1);
      process.exit();
    });
  });
});
